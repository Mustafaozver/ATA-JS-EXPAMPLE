((ATA)=>{
	const PostgreSQL = ANA.Library.DBMS["PostgreSQL"];
	const config = ANA.Configurations.GetConstant("PostgreSQL");
	return;
	const {
		Sequelize,
		BindingModel,
		DataTypes,
		GenerateConfig,
		Connect,
		LoadModel,
		ExtendedModel,
	} = PostgreSQL;
	
	const Stack = {};
	
	
	
	
	const ScanModels = (sequelize, schema)=>{
		const path = ATA.Path.join(ATA.CWD, "./DB/PostgreSQL/Model/");
		const list = {};
		const columns = {}
		
		
		ATA.FS.readdirSync(path).map((filename)=>{
			const filepath = ATA.Path.join(path, filename);
			if(ATA.FS.statSync(filepath).isDirectory())return;
			const path_parse = ATA.Path.parse(filepath);
			if(path_parse === ".js")return;
			
			const name = filename.split(".")[0];
			const definite = ATA.Require(filepath);
			
			list[name] = definite;
			return;
			
			const model = LoadModel(name, (columns), schema, sequelize);
			Stack[name] = model;
			
		});
		
		const keys = Object.keys(list);
		
		keys.map((key)=>{
			Stack[key] = class extends ExtendedModel{};
			columns[key] = {};
		});
		
		
		keys.map((key)=>{
			const modelObject = list[key];
			const links = modelObject.Link ? modelObject.Link() : {};
			
			Object.keys(links).map((item, index)=>{
				const key2 = "Link_" + item;
				const model = links[item];
				columns[key][key2] = {
					type: DataTypes.UUID,
					allowNull: false,
					//foreignKey: true,
					//onDelete: "SET NULL",
					references: {
						model,
						key: "ID"
					},
				};
			});
		});
		
		
		
		keys.map((key)=>{
			const modelObject = list[key];
			const linkObj = columns[key];
			Stack[key].init(Object.assign(BindingModel(), modelObject.Definition(DataTypes), linkObj), {
				sequelize,
				schema,
				modelName: key,
				//freezeTableName: true,
				//tableName: key,
			});
		});
		
		
		keys.map((key)=>{
			const modelObject = list[key];
			const linkObj = columns[key];
			Object.keys(linkObj).map((key2)=>{
				console.log(columns[key][key2].references.model, Stack[columns[key][key2].references.model]);
				Stack[key].hasOne(Stack[columns[key][key2].references.model], {
					as: key2 + "_object",
					sourceKey: key2,
					foreignKey: "ID",
					constraints: true,
				});
			});
		});
		
		
		
		
		keys.map((key)=>{
			return Stack[key];
		}).map((model)=>{
			model.Associate(Stack);
		});
		
		
		
		return;
		keys.map((key)=>{
			return Stack[key];
		}).map((model)=>{
			model.Associate(Stack);
		});
	};
	
	const Setup = ()=>{
		ANA.DBMS.PostgreSQL.Connection = Connect(GenerateConfig(config));
		ScanModels(ANA.DBMS.PostgreSQL.Connection, config.SCHEMA);
	};
	
	ATA.Setups.push(()=>{
		Setup();
	});
	
	const GetModel = (name="")=>{
		return Stack[name] || false;
	};
	
	ANA.DBMS.PostgreSQL = {
		GetModel,
	};
})(ATA());